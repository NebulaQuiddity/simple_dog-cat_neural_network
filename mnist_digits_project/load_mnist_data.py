# Written by Tanner Leonard
# 11/25/2017 (yep I use mm/dd/yyyy sorry!)

# import dependencies
import numpy as np
from matplotlib import pyplot as plt
import csv


def create_mnist_data(training_data_filename, test_data_filename, save=False, training_data_x_filename=None,
                      training_data_y_filename=None, test_data_x_filename=None, test_data_y_filename=None):
    """

    :param training_data_filename: the name of the file that contains the training data
    :param test_data_filename: the name of the file that contains the test data
    :param save: this will save your arrays to files in the .npy format. If this is true, use the following four
    arguments to specify the names of the files (SHOULD END IN .NPY!)
    :return: X_training, Y_training, X_test, Y_test
    """

    # create X and Y arrays to load the data into
    X_train = []
    Y_train = []
    X_test = []
    Y_test = []

    # load in the training data into a numpy array
    with open(training_data_filename, 'r') as training_data_file:

        # open the csv and write the data to arrays
        training_data_text = csv.reader(training_data_file)
        for x in training_data_text:
            digit = np.array(x[1:])
            digit = digit.reshape(digit.shape[0], 1)
            X_train.append(digit)
            Y_train.append(x[0])

        Y_train = np.array(Y_train)
        Y_train = Y_train.reshape(Y_train.shape[0], 1)

    with open(test_data_filename, 'r') as test_data_file:

        # open the csv and write the data to arrays
        test_data_text = csv.reader(test_data_file)
        for x in test_data_text:
            digit = np.array(x[1:])
            digit = digit.reshape(digit.shape[0], 1)
            X_test.append(digit)
            Y_test.append(x[0])

        Y_test = np.array(Y_test)
        Y_test = Y_test.reshape(Y_test.shape[0], 1)

    # convert everything to integers
    X_train = np.array(X_train)
    X_test = np.array(X_test)

    # process the data and stuff
    X_train = X_train.astype(int)
    Y_train = Y_train.astype(int)
    X_test = X_test.astype(int)
    Y_test = Y_test.astype(int)
    X_train = (X_train.reshape(X_train.shape[0], X_train.shape[1])).transpose()
    X_test = (X_test.reshape(X_test.shape[0], X_test.shape[1])).transpose()

    # normalize
    X_train = np.divide(X_train, 255)
    X_test = np.divide(X_test, 255)
    Y_train = convert_y([Y_train])[0]
    Y_test = convert_y([Y_test])[0]

    if save:
        # save the arrays to files
        np.save(training_data_x_filename, X_train)
        np.save(training_data_y_filename, Y_train)
        np.save(test_data_x_filename, X_test)
        np.save(test_data_y_filename, Y_test)

    else:
        # simply return the arrays
        return X_train, Y_train.transpose(), X_test, Y_test.transpose()


def convert_y(y_arrays):
    """
    converts the y arrays from scalars to vectors
    :param y_arrays: the arrays that you want to convert
    :return: x converted arrays
    """
    converted_arrays = []

    for x in y_arrays:

        converted_array = np.zeros((x.shape[0], 10))
        for y in range(x.shape[0]):
            converted_array[y][x[y]] = 1
        converted_arrays.append(converted_array)

    return converted_arrays


def load_data_from_files(files):
    """
    will load data from .npy files
    :param files: the file names in this order: (X_train, Y_train, X_test, Y_test)
    :return: X_train, Y_train, X_test, Y_test
    """

    arrays = []
    for x in files:
        array = np.load(x)
        arrays.append(array)

    return arrays[0], arrays[1].transpose(), arrays[2], arrays[3].transpose()


def show_mnist_images(image_array):
    """
    allows you to interact with and view the images
    :param image_array: the input array that contains all of the image data (as generated by load_mnist_data()
    :return: nothing
    """
    images = []
    img_array = image_array.transpose()

    for x in img_array:
        images.append(x.reshape(int(np.sqrt(x.shape[0])), int(np.sqrt(x.shape[0]))))

    active = True
    while active:
        active = show_images(images)


def show_images(images):
    """
    shows images using matplotlib
    :param images: the images that you want to view
    :return: nothing
    """

    image_number = input('What image would you like to view? Type \\quit to quit. ')

    if image_number == '\\quit':
        return False

    try:
        image_number = int(image_number)

        image = np.array(images[image_number])

        plt.imshow(image, cmap='Greys'), plt.axis('off')
        plt.show()
    except ValueError:
        print('please enter an integer')

    return True
